// <auto-generated />
using System;
using Aeronave.Infraestructure.EF.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Aeronave.Infraestructure.EF.Migrations
{
    [DbContext(typeof(ReadDbContext))]
    [Migration("20220528160942_InitialStructure")]
    partial class InitialStructure
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.16")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.AeronaveReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Estado")
                        .HasMaxLength(100)
                        .HasColumnType("int")
                        .HasColumnName("estado");

                    b.Property<string>("Matricula")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("matricula");

                    b.HasKey("Id");

                    b.ToTable("Aeronave");
                });

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.AeropuertoReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Ciudad")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pais")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Aeropuerto");
                });

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.AsientoReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Area")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("area");

                    b.Property<int>("Columna")
                        .HasColumnType("int")
                        .HasColumnName("columna");

                    b.Property<int>("Fila")
                        .HasColumnType("int")
                        .HasColumnName("fila");

                    b.Property<Guid?>("ModeloAeronaveId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ModeloAeronaveId");

                    b.ToTable("Asiento");
                });

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.MantenimientoReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AeronaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime2")
                        .HasColumnName("fechaFin");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("fechaInicio");

                    b.Property<string>("Observaciones")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("observaciones");

                    b.HasKey("Id");

                    b.HasIndex("AeronaveId");

                    b.ToTable("Mantenimiento");
                });

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.ModeloAeronaveReadModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("AeronaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("CapacidadCarga")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("capacidadCarga ");

                    b.Property<decimal>("CapacidadCargaCombustible")
                        .HasPrecision(12, 2)
                        .HasColumnType("decimal(12,2)")
                        .HasColumnName("capacidadCargaCombustible");

                    b.Property<string>("Marca")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("marca");

                    b.Property<string>("Modelo")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("modelo");

                    b.HasKey("Id");

                    b.HasIndex("AeronaveId");

                    b.ToTable("ModeloAeronave");
                });

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.AsientoReadModel", b =>
                {
                    b.HasOne("Aeronave.Infraestructure.EF.ReadModel.ModeloAeronaveReadModel", "ModeloAeronave")
                        .WithMany("Asientos")
                        .HasForeignKey("ModeloAeronaveId");

                    b.Navigation("ModeloAeronave");
                });

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.MantenimientoReadModel", b =>
                {
                    b.HasOne("Aeronave.Infraestructure.EF.ReadModel.AeronaveReadModel", "Aeronave")
                        .WithMany("MantenimientoAeronave")
                        .HasForeignKey("AeronaveId");

                    b.Navigation("Aeronave");
                });

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.ModeloAeronaveReadModel", b =>
                {
                    b.HasOne("Aeronave.Infraestructure.EF.ReadModel.AeronaveReadModel", "Aeronave")
                        .WithMany()
                        .HasForeignKey("AeronaveId");

                    b.Navigation("Aeronave");
                });

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.AeronaveReadModel", b =>
                {
                    b.Navigation("MantenimientoAeronave");
                });

            modelBuilder.Entity("Aeronave.Infraestructure.EF.ReadModel.ModeloAeronaveReadModel", b =>
                {
                    b.Navigation("Asientos");
                });
#pragma warning restore 612, 618
        }
    }
}
