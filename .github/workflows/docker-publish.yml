name: Staging deployment

on:
  push:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Setup .NET
      uses: actions/setup-dotnet@v2
      with:
        dotnet-version: 5.0.x
    - name: Restore dependencies
      run: dotnet restore
    - name: Build
      run: dotnet build --no-restore
    - name: Test
      run: dotnet test --no-build --verbosity normal

  staging:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Configure SSH
        env:
          SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          KNOWN_HOSTS: ${{ secrets.KNOWN_HOSTS }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          SSH_USER: ${{ secrets.SSH_USER }}
        run: |
          mkdir -p ~/.ssh/
          echo "$KNOWN_HOSTS" > ~/.ssh/known_hosts
          echo "$SSH_KEY" > ~/.ssh/staging.key
          chmod 600 ~/.ssh/staging.key
          cat >>~/.ssh/config <<END
            Host staging
              HostName $SSH_HOST
              User $SSH_USER
              IdentityFile ~/.ssh/staging.key
              StrictHostKeyChecking no
          END
      - name: Stop the server
        run: ssh staging 'cd /ms/AeronaveNur/ && docker-compose down'

      - name: Do deploy
        run: ssh staging 'cd /ms/AeronaveNur/ && sudo sh update-aeronave.sh'
        
      - name: Get release name
        id: get-release-name
        run: echo "RELEASE_NAME=${{ github.event.release.name }}" >> $GITHUB_ENV
        
      - name: run scripts
        run: ssh staging 'cd /ms/AeronaveNur/ && sudo sh update-database.sh' $RELEASE_NAME
        
      - name: Start the server
        if: ${{ always() }}
        run: ssh staging 'cd /ms/AeronaveNur/ && docker-compose up --build -d'
